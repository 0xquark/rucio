name: Run all the autotests

on:
  pull_request:
  push:
  schedule:
    - cron: '0 3 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  add_header:
    if: github.repository_owner == 'rucio' || github.event_name != 'schedule'
    name: Add header lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # We need the history to determine the file creation date.
          fetch-depth: 0
      - name: Check headers
        shell: bash
        run: |
          python3 tools/add_header --dry-run --disable-progress-bar
  python_ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Install Python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Run Ruff
        run: ruff check --output-format=github .
  python_annotations:
    if: |
      !startsWith(github.ref_name, 'release')
      && !startsWith(github.base_ref, 'release')
      && github.event_name != 'schedule'
      && github.ref_type != 'tag'
    name: Check Python Type Annotations
    runs-on: ubuntu-latest
    env:
      UPDATED_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE: ../updated_type_annotation_report.txt
      INITIAL_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE: ../initial_type_annotation_report.txt
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Count current number of missing type annotations
        id: count_updated
        shell: bash
        run: |
          pip install flake8 flake8-annotations
          source tools/count_missing_type_annotations_utils.sh
          create_missing_python_type_annotations_report ${{ env.UPDATED_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }}
          echo "The current number of missing python type annotations: $(wc -l < ${{ env.UPDATED_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }})"
      - name: Checkout ancestor commit with rucio/master
        uses: ./.github/actions/checkout_ancestor_commit
        with:
          paths_to_copy: |
            tools/count_missing_type_annotations.sh
            tools/count_missing_type_annotations_utils.sh
      - name: Count initial number of missing type annotations
        id: count_initial
        shell: bash
        run: |
          source tools/count_missing_type_annotations_utils.sh
          create_missing_python_type_annotations_report ${{ env.INITIAL_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }}
          echo "The initial number of missing python type annotations: $(wc -l < ${{ env.INITIAL_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }})"
      - name: Diff of missing annotations
        shell: bash
        run: |
          diff ${{ env.INITIAL_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }} ${{ env.UPDATED_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }} || true
      - name: Compare numbers of missing type annotations
        shell: bash
        run: |
          INITIAL_NUMBER_OF_MISSING_TYPE_ANNOTATIONS=$(wc -l < ${{ env.INITIAL_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }})
          UPDATED_NUMBER_OF_MISSING_TYPE_ANNOTATIONS=$(wc -l < ${{ env.UPDATED_PYTHON_TYPE_ANNOTATIONS_REPORT_FILE }})

          echo "The initial number of missing type annotations is: $INITIAL_NUMBER_OF_MISSING_TYPE_ANNOTATIONS"
          echo "The updated number of missing type annotations is: $UPDATED_NUMBER_OF_MISSING_TYPE_ANNOTATIONS"
          if [ $UPDATED_NUMBER_OF_MISSING_TYPE_ANNOTATIONS -gt $INITIAL_NUMBER_OF_MISSING_TYPE_ANNOTATIONS ]; then
            echo "The number of missing python type annotations should never increase! This way we ensure that new functions are type annotated."
            echo "Look into the first lines of 'Diff of missing type annotations' to get a reference point what function might be missing type annotations."
            echo "**TL;DR** New code has to be type annotated, old code should be migrated. Look into Best Practices[1] for specific instructions on how to use it in our repository."
            echo "Look into the Rucio Type Annotations Guide[2] to get some help on why, what and how to add type annotations."
            echo
            echo "[1] https://codimd.web.cern.ch/6-SU3cTpQSWRK6FHkM7mAA#Best-Practices"
            echo "[2] https://codimd.web.cern.ch/6-SU3cTpQSWRK6FHkM7mAA#"
            exit 1
          fi
  python_pyright:
    if: |
      !startsWith(github.ref_name, 'release')
      && !startsWith(github.base_ref, 'release')
      && github.event_name != 'schedule'
      && github.ref_type != 'tag'
    name: Python type check (Pyright)
    runs-on: ubuntu-latest
    env:
      PYRIGHT_CURRENT_REPORT: ../pyright_current_report.json
      PYRIGHT_ANCESTOR_REPORT: ../pyright_ancestor_report.json
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y npm libkrb5-dev libxmlsec1-dev git
          npm install --global pyright
          python -m pip --no-cache-dir install --upgrade pip
          python -m pip --no-cache-dir install --upgrade -r requirements/requirements.server.txt -r requirements/requirements.dev.txt
      - name: Make pyright report of current commit
        run: |
          tools/run_pyright.sh generate ${{ env.PYRIGHT_CURRENT_REPORT }}
      - name: Show the current Pyright report
        run: cat ${{ env.PYRIGHT_CURRENT_REPORT }}
      - name: Checkout ancestor commit with rucio/master
        uses: ./.github/actions/checkout_ancestor_commit
        with:
          paths_to_copy: |
            pyrightconfig.json
            tools/run_pyright.sh
            tools/run_pyright/
      - name: Make pyright report of ancestor commit
        run: |
          tools/run_pyright.sh generate ${{ env.PYRIGHT_ANCESTOR_REPORT }}
      - name: Show the ancestor Pyright report
        run: cat ${{ env.PYRIGHT_ANCESTOR_REPORT }}
      - name: Compare reports
        run: |
          tools/run_pyright.sh compare --Werror \
            ${{ env.PYRIGHT_ANCESTOR_REPORT }} \
            ${{ env.PYRIGHT_CURRENT_REPORT }}
  setup:
    if: github.repository_owner == 'rucio' || github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Update pip
        run: python3 -m pip install -U pip setuptools
      - name: Install python requirements for matrix_parser.py
        run: python3 -m pip install -U PyYAML
      - name: Identify branch
        id: branch
        run: python3 tools/github/workflow/set_branch_output_env.py
      - name: Identify Matrix
        id: matrix
        run: |
          EVENT="${{ github.event_name }}"
          if [ $EVENT != 'schedule' ]; then
            echo "matrix=$(./tools/test/matrix_parser.py < ./etc/docker/test/matrix.yml)" >> $GITHUB_OUTPUT
          else
            echo "matrix=$(./tools/test/matrix_parser.py < ./etc/docker/test/matrix_nightly.yml)" >> $GITHUB_OUTPUT
          fi
    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      matrix: ${{ steps.matrix.outputs.matrix }}
  
  # Build runtime images
  runtime_images:
    runs-on: ubuntu-latest
    name: Build Runtime Images
    outputs:
      py39_image: ${{ steps.build_images.outputs.py39_image }}
      py310_image: ${{ steps.build_images.outputs.py310_image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate cache keys
        id: cache_keys
        run: |
          # Calculate hash for Python 3.9 image
          PY39_HASH=$(find requirements -type f -name "*.txt" -print0 | sort -z | xargs -0 sha256sum | sha256sum | cut -d' ' -f1)
          PY39_HASH="${PY39_HASH}$(sha256sum etc/docker/test/runtime.Dockerfile | cut -d' ' -f1)"
          PY39_HASH=$(echo $PY39_HASH | sha256sum | cut -d' ' -f1 | cut -c1-12)
          echo "py39_hash=$PY39_HASH" >> $GITHUB_OUTPUT
          
          # Calculate hash for Python 3.10 image
          PY310_HASH=$(find requirements -type f -name "*.txt" -print0 | sort -z | xargs -0 sha256sum | sha256sum | cut -d' ' -f1)
          PY310_HASH="${PY310_HASH}$(sha256sum etc/docker/test/runtime.Dockerfile | cut -d' ' -f1)"
          PY310_HASH=$(echo $PY310_HASH | sha256sum | cut -d' ' -f1 | cut -c1-12)
          echo "py310_hash=$PY310_HASH" >> $GITHUB_OUTPUT

      - name: Set image tags
        id: set_tags
        run: |
          echo "py39_image=ghcr.io/${{ github.repository }}/rucio-dev-runtime:py39-${{ steps.cache_keys.outputs.py39_hash }}" >> $GITHUB_OUTPUT
          echo "py310_image=ghcr.io/${{ github.repository }}/rucio-dev-runtime:py310-${{ steps.cache_keys.outputs.py310_hash }}" >> $GITHUB_OUTPUT

      - name: Check if Python 3.9 image exists
        id: check_py39
        continue-on-error: true
        run: |
          docker manifest inspect ${{ steps.set_tags.outputs.py39_image }} > /dev/null
          echo "exists=$?" >> $GITHUB_OUTPUT

      - name: Check if Python 3.10 image exists
        id: check_py310
        continue-on-error: true
        run: |
          docker manifest inspect ${{ steps.set_tags.outputs.py310_image }} > /dev/null
          echo "exists=$?" >> $GITHUB_OUTPUT

      - name: Build and push Python 3.9 image
        if: steps.check_py39.outputs.exists != '0'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: etc/docker/test/runtime.Dockerfile
          push: true
          tags: ${{ steps.set_tags.outputs.py39_image }}
          build-args: |
            PYTHON=3.9
          cache-from: type=registry,ref=${{ steps.set_tags.outputs.py39_image }}
          cache-to: type=inline

      - name: Build and push Python 3.10 image
        if: steps.check_py310.outputs.exists != '0'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: etc/docker/test/runtime.Dockerfile
          push: true
          tags: ${{ steps.set_tags.outputs.py310_image }}
          build-args: |
            PYTHON=3.10
          cache-from: type=registry,ref=${{ steps.set_tags.outputs.py310_image }}
          cache-to: type=inline

      - name: Output image tags
        id: build_images
        run: |
          echo "py39_image=${{ steps.set_tags.outputs.py39_image }}" >> $GITHUB_OUTPUT
          echo "py310_image=${{ steps.set_tags.outputs.py310_image }}" >> $GITHUB_OUTPUT
  
  test:
    needs: [setup, runtime_images]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare test configuration
        id: prepare_test
        run: |
          # Get Python version from matrix configuration
          PYTHON_VERSION="${{ matrix.cfg.PYTHON }}"
          
          # Set the appropriate runtime image based on Python version
          if [ "$PYTHON_VERSION" == "3.9" ]; then
            RUNTIME_IMAGE="${{ needs.runtime_images.outputs.py39_image }}"
          elif [ "$PYTHON_VERSION" == "3.10" ]; then
            RUNTIME_IMAGE="${{ needs.runtime_images.outputs.py310_image }}"
          else
            echo "Unsupported Python version: $PYTHON_VERSION"
            exit 1
          fi
          
          echo "runtime_image=$RUNTIME_IMAGE" >> $GITHUB_OUTPUT
      
      - name: Run tests
        run: |
          # Run tests with the runtime image
          echo '{"matrix": ${{ toJson(matrix.cfg) }}, "runtime_image": "${{ steps.prepare_test.outputs.runtime_image }}"}' | ./tools/test/run_tests.py
