name: Build Runtime Images

on:
  workflow_call:
    inputs:
      python_versions:
        description: 'Python versions to build images for'
        required: false
        default: '["3.9", "3.10"]'
        type: string
    outputs:
      image_tags:
        description: 'JSON mapping of Python versions to image tags'
        value: ${{ jobs.build-images.outputs.image_tags }}
  schedule:
    # Run weekly to ensure we have the latest images
    - cron: '0 2 * * 1'  # Every Monday at 2 AM
  workflow_dispatch:
    inputs:
      python_versions:
        description: 'Python versions to build images for (JSON array)'
        required: false
        default: '["3.9", "3.10"]'
        type: string

jobs:
  build-images:
    name: Build Runtime Images
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.build-images.outputs.image_tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Compute hash and build images
        id: build-images
        run: |
          # Parse Python versions from input or use default
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PYTHON_VERSIONS=$(echo '${{ inputs.python_versions }}' | jq -c '.')
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            PYTHON_VERSIONS='["3.9", "3.10"]'
          else
            PYTHON_VERSIONS=$(echo '${{ inputs.python_versions }}' | jq -c '.')
          fi
          
          echo "Building images for Python versions: $PYTHON_VERSIONS"
          
          # Initialize image tags object
          declare -A IMAGE_TAGS_MAP
          
          for PY_VERSION in $(echo $PYTHON_VERSIONS | jq -r '.[]'); do
            echo "Processing Python version $PY_VERSION"
            
            # Files to include in the hash calculation
            DOCKERFILE="etc/docker/test/runtime.Dockerfile"
            REQ_FILES=$(find requirements -name "*.txt" | sort | tr '\n' ' ')
            
            # Calculate hash
            HASH=$(cat $DOCKERFILE $REQ_FILES | sha256sum | cut -c1-12)
            
            # Create image tag
            IMAGE_TAG="rucio-dev-runtime:py${PY_VERSION}-${HASH}"
            FULL_IMAGE_TAG="ghcr.io/${{ github.repository }}/${IMAGE_TAG}"
            
            echo "Image tag: $FULL_IMAGE_TAG"
            
            # Check if image exists in the registry
            if docker manifest inspect $FULL_IMAGE_TAG > /dev/null 2>&1; then
              echo "Image $FULL_IMAGE_TAG already exists, pulling it..."
              docker pull $FULL_IMAGE_TAG
            else
              echo "Image $FULL_IMAGE_TAG does not exist, building it..."
              
              # Build the image
              docker build \
                -f $DOCKERFILE \
                --build-arg PYTHON=$PY_VERSION \
                --cache-from $FULL_IMAGE_TAG \
                -t $IMAGE_TAG \
                -t $FULL_IMAGE_TAG \
                .
              
              # Push the image
              docker push $FULL_IMAGE_TAG
            fi
            
            # Store in associative array
            IMAGE_TAGS_MAP[$PY_VERSION]=$FULL_IMAGE_TAG
          done
          
          # Convert to JSON and escape properly for GitHub Actions
          IMAGE_TAGS_JSON=$(jq -n --arg py39 "${IMAGE_TAGS_MAP[3.9]}" --arg py310 "${IMAGE_TAGS_MAP[3.10]}" '{"3.9": $py39, "3.10": $py310}')
          echo "image_tags=$IMAGE_TAGS_JSON" >> $GITHUB_OUTPUT
          echo "Image tags: $IMAGE_TAGS_JSON" 